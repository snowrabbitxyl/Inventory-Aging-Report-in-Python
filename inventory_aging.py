# -*- coding: utf-8 -*-
"""Inventory Aging.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eLg-qrbwPM321gLwksdlMGHSOi-jVrVs

# import packages and dataset, define the main function
"""

from datetime import date
import pandas as pd
import numpy as np

re_date = pd.read_excel('Inventory Aging Eg.xlsx', sheet_name='Receipt date') # purchased items
sh_date = pd.read_excel('Inventory Aging Eg.xlsx', sheet_name='Ship date') # sold items
cv = pd.read_excel('Inventory Aging Eg.xlsx', sheet_name='Current Value') # current inventory physical value
rt_qty = pd.read_excel('Inventory Aging Eg.xlsx', sheet_name='Returned Qty') # returned itmes

# define a function to show the Receipt date of each item in the warehouse
def rpt_date(value, repetitions,Qty):
    return np.repeat(value, repetitions).iloc[Qty:].tolist()

"""# Data cleansing

### Find SKUs with positive quantity left in the inventory
"""

# add returned items into purchased items table
re_date = pd.concat([re_date, rt_qty])

# each product sort by date
re_date = re_date.sort_values(['ProductID', 'Received Date'],ascending=[True, True])

re_date

# calculate total qty in re_date, group by productID
total_qty_re = re_date.groupby('ProductID')['QtyReceived'].sum()

# Calculate the purchased quantity for each SKU
re_summary = pd.DataFrame(columns=['ProductID', 're_qty'])
re_summary['ProductID'] = total_qty_re.index
re_summary['re_qty'] = total_qty_re.values
print(re_summary)

# calculate total qty in sh_date, group by productID
total_qty_sh = sh_date.groupby('ProductID')['Qty'].sum()

# Calculate the sold quantity for each SKU
sh_summary = pd.DataFrame(columns=['ProductID', 'sh_qty'])
sh_summary['ProductID'] = total_qty_sh.index
sh_summary['sh_qty'] = total_qty_sh.values
print(sh_summary)

# left join re_summary and sh_summary, left table is re_summary, create a column calculating 're_qty'-'Total Qty'
import pandas as pd
left_joined = pd.merge(re_summary, sh_summary, on='ProductID', how='left')
left_joined['Difference'] = left_joined['re_qty'] - left_joined['sh_qty']
print(left_joined)

# take out SKUs which should have negative quantity left
merged_pos = left_joined[left_joined['Difference'] > 0]
print(merged_pos)

# save negative results in a data frame
merged_neg = left_joined[left_joined['Difference'] <= 0]
print(merged_neg)

# in re_date and sh_date, delete rows where ProductID is not in merged_pos
re_date_pos = re_date[re_date['ProductID'].isin(merged_pos['ProductID'])]
sh_date_pos = sh_date[sh_date['ProductID'].isin(merged_pos['ProductID'])]

import copy
re_date_og = copy.deepcopy(re_date)
sh_date_og = copy.deepcopy(sh_date)

# drop rows in re_date_pos where QtyReceived =0
re_date_pos = re_date_pos[re_date_pos['QtyReceived'] != 0]
sh_date_pos = sh_date_pos[sh_date_pos['Qty'] != 0]

# reset index for both dataframes
sh_date_pos = sh_date_pos.reset_index(drop=True)
re_date_pos = re_date_pos.reset_index(drop=True)

# rename columns in re_date_pos
re_date_pos.rename(columns={'Received Date': 'Ship Date', 'QtyReceived': 'Qty'}, inplace=True)

"""### Take the negative quantities from receive table to ship table"""

# for each row in re_date_pos, if QtyReceived <0, delete it from re_date_pos and add to sh_date_pos

for index, row in re_date_pos.iterrows():
  if row['Qty'] < 0:
    re_date_pos.drop(index, inplace=True)
    sh_date_pos.loc[len(sh_date_pos)] = row

sh_date_pos['Qty'] = abs(sh_date_pos['Qty'])

# calculate total qty in sh_date_pos, group by productID
total_qty_sh_pos = sh_date_pos.groupby('ProductID')['Qty'].sum()

"""### Summarize the new ship table"""

# Calculate the sold quantity for each SKU
sh_pos_summary = pd.DataFrame(columns=['ProductID', 'sh_qty'])
sh_pos_summary['ProductID'] = total_qty_sh_pos.index
sh_pos_summary['sh_qty'] = total_qty_sh_pos.values
print(sh_pos_summary)

"""# Run the main function and format the results"""

df_age = pd.DataFrame(columns=['ProductID', 'Qty', 'Date Difference'])

for i in re_date_pos['ProductID'].unique().tolist():
  re_date_filtered = re_date_pos[re_date_pos['ProductID'] == i].sort_values(['Ship Date'],ascending=True)
  received_dates = re_date_filtered['Ship Date']
  received_quantities = re_date_filtered['Qty']
  if i in sh_pos_summary['ProductID'].tolist():
    qty = sh_pos_summary[sh_pos_summary['ProductID'] == i]['sh_qty'].tolist()[0]
  else:
    qty = 0
  dates = rpt_date(received_dates.astype(str), received_quantities, qty)
  today = date.today()
  date_diff_list = []
  left_qty = sum(received_quantities)-qty
  if left_qty >0:
    for j in dates:
      date_obj = date.fromisoformat(j)
      date_diff = today - date_obj
      date_diff_list.append(date_diff.days)
    df_age.loc[len(df_age)] = [i, left_qty, date_diff_list]
print(df_age)

df_age

# convert "Date Deifference" column in df_age from list to string

df_age['Date Difference'] = df_age['Date Difference'].apply(lambda x: ','.join(map(str, x)))

df_age

# add four columns "1-30", "31-60","61-90", ">90" to df_age, fill these four columns with count of values from "Date Difference" column for each productID

import re

def categorize_date_diff(date_diff):
  if date_diff <= 30:
    return "Aged 1-30"
  elif date_diff <= 60:
    return "Aged 31-60"
  elif date_diff <= 90:
    return "Aged 61-90"
  elif date_diff <=365:
    return "Aged 91-365"
  else:
    return "Aged >365"

df_age["Aged 1-30"] = 0
df_age["Aged 31-60"] = 0
df_age["Aged 61-90"] = 0
df_age["Aged 91-365"] = 0
df_age["Aged >365"] = 0

for i, row in df_age.iterrows():
  date_diffs = [int(x) for x in row["Date Difference"].split(",")]
  for date_diff in date_diffs:
    category = categorize_date_diff(date_diff)
    df_age.at[i, category] += 1

df_age.drop(columns=["Date Difference"], inplace=True)

df_age

"""# Add negative quantities (removed at the beginning) and the current available qty to results"""

# add ProductID and Differnece columns from merged_neg to the ProductID and Qty columns in df_age, value for other columns are 0
df_total = pd.concat([df_age,pd.DataFrame({'ProductID': merged_neg['ProductID'].tolist(), 'Qty': merged_neg['Difference'].tolist(), 'Aged 1-30': 0, 'Aged 31-60': 0, 'Aged 61-90': 0, 'Aged 91-365': 0, 'Aged >365': 0})])

df_total=df_total.reset_index(drop=True)

df_total

# add current value to df_total
df_total_2 = pd.merge(df_total, cv, left_on='ProductID', right_on='ProductName', how='left')

# move Available Qty column before Qty column and drop useless columns
df_total_2 = df_total_2[['ProductID', 'Available Qty', 'Qty', 'Aged 1-30', 'Aged 31-60', 'Aged 61-90', 'Aged 91-365', 'Aged >365']]

df_total_2

df_total_2.to_csv('Inventory Age.csv')